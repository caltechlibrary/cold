#
# cold.yaml defines the controlled object list and datum application
# from the perspective of Newt, a data route and form validator that
# relies on Postgres+PostgREST and Pandoc server for completing the microservice
# trio that is cold.
# 
# @author: R. S. Doiel <rsdoiel@caltech.edu>
#
namespace: cold
models:
- model: cold.people
  var:
    cl_people_id: String*
    family_name: String
    given_name: String
    orcid: ORCID
    author_id: String
    directory_id: String
    caltech: Boolean
    status: Boolean
    directory_person_type: String
    division: String
    updated: Date 2006-01-02
    ror: ROR
- model: cold.groups
  var:
    cl_group_id: String*
    name: String
# FIXME: This should be an array of string but currently in CSV is a semi-colon delimited list
    alternative: String
    updated: Timestamp
# Date group was added to Group List
    date: Date 2006-01-02
    email: EMail
    website: URL
    description: Text
    start_date: String
# approx_starts indicates if the "start_date" is an approximate (true) or exact (false)
    approx_start: Boolean
# activity is a string value holding either "active" or "inactive"  
    activity: String
    end_date: String
# approx_end indicates if the "start_date" is an approximate (true) or exact (false)
    approx_end: Boolean
    pi: String
    parent: String
# prefix holds the DOI prefix associated with the group
    prefix: String
    grid: String
    isni: ISNI
    ringold: String
    viaf: String
    ror: ROR
#
# Controlled vocabulary model, these get translated into RDM vocabularies
#
- model: cold.subjects
  var:
    key: String*
    value: String
- model: cold.doi_prefixes
  var:
    key: String*
    value: String
# NOTE: cold.journal_names is a tripple of issn, journal name and publisher name
- model: cold.journal_names
  var:
    issn: String*
    journal: String
    publisher: String
#
#
# cold service web configuration 
#
port: 8000
htdocs: htdocs
#
# cold routes, static content routes are noted only in comments. Dynamic
# ones are notated for orchestration by Newt. Newt's JSON data sources include
# two datasetd instances. The first running on port 8485 provides a read only
# service and the second running on port 8486 runs a read/write service and 
# must be restricted.
#
# Datasetd configuration files: cold_ds_readonly.yaml and cold_ds_readwrite.yaml
#
routes:
#
# /cold/people returns a list of all people names linking to /cold/people/{clpid}
# 

# 
# /cold/people/{clpid} returns a single person object
#

#
# /cold/groups returns a list of all group names linking to /cold/groups/{clgid}
#

#
# /cold/groups/{clgid} returns a single group object
#

#
# A cross walk lets you put in a collection name (e.g. people, group), 
# a field name and a value and it returns a list of matching records.
#

#
# /cold/crosswalk/people/${identifier_name}/${identifier_value}
# Returns a list of "cl_people_id" assocated with that identifier
#

#
# people_crosswalk is implemented as an SQL function operating on the cl_person model
#

#
# /cold/crosswalk/group/${identifier_name}/${identifier_value}
# Returns a list of "cl_group__id" assocated with that identifier

#
# Vocabularies
# ------------
#
# **cold** also supports end points for stable vocabularies mapping an 
# indentifier to a normalized name. These are set at compile time because
# they are so slow changing. 
#
# /cold/subject
# : Returns a list of all the subject ids (codes)
- request_path: /cold/subject
  request_method: GET
  api_method: GET
# subjects is implemented as an SQL view returning all subject ids
  api_url: http://localhost:3000/subjects
# 
# /cold/subject/${subject_id}
# : Returns the normalized text string for that subject id
- var:
    subject_id: String
  request_path: /cold/subject/${subject_id}
  request_method: GET
  api_method: GET
# get_subject is implemented as an SQL function on cl_subject model
  api_url: http://localhost:3000/rpc/get_subject?subject_id=${subject_id}
#
# /cold/issn
# : Returns a list of issn that are mapped to a publisher name
- request_path: /cold/issn
  request_method: GET
  api_method: GET
  api_url: http://localhost:3000/publishers
#
# /cold/issn/${issn}
#: Returns the normalized publisher name for that ISSN
- var:
    issn: ISSN
  request_path: /cold/issn/${issn}
  request_method: GET
  api_method: GET
# get_publisher is implemented as a SQL function on cl_publisher model
  api_url: http://localhost:3000/rpc/get_publisher?issn=${issn}
#
# /cold/doi-prefix
# : Returns a list of DOI prefixes that map to a normalize name
- request_path: /cold/doi-prefix
  request_method: GET
  api_method: GET
# doi-prefixes is implemented as a SQL view on cl_doi_prefix model
  api_url: http://localhost:3000/doi-prefixes
#
# /cold/doi-prefix/${doi_prefix}
# : Returns the normalized publisher name for that DOI prefix
- var:
    doi_prefix: String
  request_path: /cold/doi-prefix/${doi_prefix}
  request_method: GET
  api_method: GET
# get_doi_prefix is implemented as a SQL function on cl_doi_prefix model
  api_url: http://localhost:3000/rpc/get_doi_prefix?doi_prefix=${doi_prefix}

